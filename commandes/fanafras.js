
const { fana } = require('../njabulo/fana');
const axios = require('axios');
const conf = require(__dirname + "/../set");
fana({
  nomCom: "fact",
  reaction: '‚úåÔ∏è',
  categorie: "Fun"
}, async (dest, zk, context) => {
  const { repondre: respond, arg, ms } = context;

  try {
    const response = await axios.get("https://nekos.life/api/v2/fact");
    const data = response.data;
    const factMessage = `
‚îè‚îÅ‚îÅ‚îÅ‚îÅ *Njabulo-FACT* ‚îÅ‚îÅ‚îÅ‚óÜ                     
‚îÉ
‚îÉ   *‚óá* ${data.fact} 
‚îÉ
‚îÉ   *‚óá* Regards Njabulo Jb
‚îÉ      
 ‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚óÜ
 ‚îÇ *_Powered by Njabulo Jb_*
 ‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚óÜ
    `;

    await zk.sendMessage(dest, {
      text: factMessage,
      contextInfo: {
        externalAdReply: {
          title: "Fun Fact",
          body: "Here's a fun fact to enlighten your day!",
          thumbnailUrl: conf.URL,
          sourceUrl: conf.GURL,
          mediaType: 1,
          showAdAttribution: true
        }
      }
    }, { quoted: ms });
  } catch (error) {
    console.error(error);
    await respond("An error occurred while fetching the fact.");
  }
});

fana({
  nomCom: "quotes",
  reaction: 'üö®',
  categorie: "Fun"
}, async (dest, zk, context) => {
  const { repondre: respond, arg, ms } = context;

  try {
    const response = await axios.get("https://favqs.com/api/qotd");
    const data = response.data;
    const quoteMessage = `
‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅNJABULO-QUOTE‚îÅ‚îÅ‚îÅ‚óÜ
‚îÉ   *‚óá* _${data.quote.body}_
‚îÉ  
‚îÉ   *‚óá* *AUTHOR:* ${data.quote.author}
‚îÉ      
‚îÉ    *‚óá*  *regards Njabulo*
‚îÉ    
‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚óÜ
‚îÇ *_Powered by Njabulo Jb*
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚óÜ
    `;

    await zk.sendMessage(dest, {
      text: quoteMessage,
      contextInfo: {
        externalAdReply: {
          title: "Daily Quote",
          body: "Here's an inspiring quote to motivate you!",
          thumbnailUrl: conf.URL,
          sourceUrl: conf.GURL,
          mediaType: 1,
          showAdAttribution: true
        }
      }
    }, { quoted: ms });
  } catch (error) {
    console.error(error);
    await respond("An error occurred while fetching the quote.");
  }
});

keith({
  nomCom: "hack",
  aliases: ["malware", "trojan"],
  reaction: "ü™Ö",
  categorie: "Fun"
}, async (dest, zk, commandeOptions) => {
  try {
    const { ms } = commandeOptions;
    const mek = ms; // The message object for quoting

    // Define the steps of the prank
    const steps = [
      "```Injecting Malware```",
      "``` ‚ñà 10%```",
      "```‚ñà ‚ñà 20%```",
      "```‚ñà ‚ñà ‚ñà 30%```",
      "``` ‚ñà ‚ñà ‚ñà ‚ñà 40%```",
      "``` ‚ñà ‚ñà ‚ñà ‚ñà ‚ñà 50%```",
      "``` ‚ñà ‚ñà ‚ñà ‚ñà ‚ñà ‚ñà 60%```",
      "``` ‚ñà ‚ñà ‚ñà ‚ñà ‚ñà ‚ñà ‚ñà 70%```",
      "```‚ñà ‚ñà ‚ñà ‚ñà ‚ñà ‚ñà ‚ñà ‚ñà 80%```",
      "```‚ñà ‚ñà ‚ñà ‚ñà ‚ñà ‚ñà ‚ñà ‚ñà ‚ñà 90%```",
      "```‚ñà ‚ñà ‚ñà ‚ñà ‚ñà ‚ñà ‚ñà ‚ñà ‚ñà ‚ñà 100%```",
      "```System hijacking on process..```",
      "```Connecting to Server error to find 404```",
      "```Device successfully connected...\nReceiving data...```",
      "```Data hijacked from device 100% completed\nKilling all evidence, killing all malwares...```",
      "```HACKING COMPLETED```",
      "```SENDING LOG DOCUMENTS...```",
      "```SUCCESSFULLY SENT DATA AND Connection disconnected```",
      "```BACKLOGS CLEARED```",
      "```POWERED BY NJABULO```",
      "```paralyzed by the mighty ${conf.OWNER_NAME}```"
    ];

    // Loop through all the steps and send them
    for (const line of steps) {
      await zk.sendMessage(dest, { text: line }, { quoted: mek });
      await new Promise(resolve => setTimeout(resolve, 1000)); // Delay for effect
    }

  } catch (error) {
    console.error('Error during prank:', error);
    // Send a more detailed error message
    await zk.sendMessage(dest, {
      text: `‚ùå *Error!* Something went wrong. Reason: ${error.message}. Please try again later.`
    });
  }
});
